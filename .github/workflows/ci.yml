name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  backend:
    runs-on: ubuntu-latest
    name: Backend Test & Build
    outputs:
      result: ${{ steps.set_result.outputs.result }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'

      - name: Download dependencies
        run: |
          cd backend
          go mod download

      - name: Run tests with coverage
        id: test
        run: |
          cd backend
          go test -coverprofile=coverage.out -coverpkg=./internal/... ./internal/tests/...

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: backend/coverage.out
          flags: backend
          name: backend-tests

      - name: Build Docker image (test only)
        id: build
        run: docker build -t backend:test -f backend/Dockerfile backend

      - name: Set result
        id: set_result
        run: |
          if [ "${{ steps.test.outcome }}" == "success" ] && [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "result=✅ Success" >> $GITHUB_OUTPUT
          else
            echo "result=❌ Failure" >> $GITHUB_OUTPUT
          fi

  frontend:
    runs-on: ubuntu-latest
    name: Frontend Test & Build
    outputs:
      result: ${{ steps.set_result.outputs.result }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies and build
        run: |
          cd frontend
          npm install
          npm run build

      - name: Build Docker image (test only)
        id: build
        run: docker build -t frontend:test -f frontend/Dockerfile frontend

      - name: Set result
        id: set_result
        run: |
          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "result=✅ Success" >> $GITHUB_OUTPUT
          else
            echo "result=❌ Failure" >> $GITHUB_OUTPUT
          fi

  slack:
    name: Slack Notification
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: GitHub Action - ${{ github.workflow }}
          SLACK_MESSAGE: |
            🔔 *GoBoard CI*
            - Repository: *${{ github.repository }}*
            - Branch: `${{ github.ref_name }}`
            - Commit: `${{ github.event.head_commit.message }}`
            - Result:
                - Backend: ${{ needs.backend.outputs.result }}
                - Frontend: ${{ needs.frontend.outputs.result }}
